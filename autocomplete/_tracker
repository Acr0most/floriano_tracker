#compdef tracker


# ~~~ LIST OF COMMANDS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_tracker_commands=(
  'cancel:Cancel the last call to the start command.'
  'config:Get and set configuration options.'
  'edit:Edit a frame.'
  'frames:Display the list of all frame IDs.'
  'help:Display help information'
  'log:Display each recorded session during the...'
  'login:Save login credentials to backend (jira).'
  'merge:Perform a merge of the existing frames with a...'
  'projects:Display the list of all the existing...'
  'remove:Remove a frame.'
  'report:Display a report of the time spent on each...'
  'restart:Restart monitoring time for a previously...'
  'start:Start monitoring time for the given project.'
  'status:Display when the current project was started...'
  'stop:Stop monitoring time for the current project.'
  'sync:Get the frames from the server and push the...'
  'tags:Display the list of all the tags.'
)


# ~~~ LOCATING THE FRAMES FILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if [[ -n "$TRACKER_DIR" ]]; then
  _tracker_frame_file=${TRACKER_DIR}/frames
elif [[ "$OSTYPE" =~ "^darwin" ]]; then
  _tracler_frame_file=${HOME}/tracker/frames
else
  _tracker_frame_file=${HOME}/.config/tracker/frames
fi


# ~~~ CACHING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Using the cache mechanism of zsh to store projects, tags and frame lists
(( $+functions[_tracker_get_projects] )) ||
_tracker_get_projects() {
  local cacheid='tracker_PROJECTS'
  if ( [[ ${+_tracker_project_list} -eq 0 ]] || _cache_invalid $cacheid ) \
            && ! _retrieve_cache $cacheid;
  then
    _tracker_project_list=($(_call_program tracker-projects tracker projects --no-color))
    _store_cache $cacheid _tracker_project_list
  fi;
}


(( $+functions[_tracker_get_tags] )) ||
_tracker_get_tags() {
  local cacheid='tracker_TAGS'
  if ( [[ ${+_tracker_tag_list} -eq 0 ]] || _cache_invalid $cacheid ) \
            && ! _retrieve_cache $cacheid;
  then
    _tracker_tag_list=($(_call_program tracker-tags tracker tags --no-color))
    _store_cache $cacheid _tracker_tag_list
  fi;
}


(( $+functions[_tracker_get_frames] )) ||
_tracker_get_frames() {
  local cacheid='tracker_FRAMES'
  if ( [[ ${+_tracker_frame_list} -eq 0 ]] || _cache_invalid $cacheid ) \
            && ! _retrieve_cache $cacheid;
  then
    _tracker_frame_list=("${(f)$(_call_program tracker-log tracker log)}")
    _store_cache $cacheid _tracker_frame_list
  fi;
}


# Define a default caching policy for tracker: we rebuild the cache
# if the cache file is older than tracker's frame file.
local cache_policy
zstyle -s ":completion::complete:tracker:*" cache-policy cache_policy
if [[ -z "$cache_policy" ]]; then
  zstyle ":completion::complete:tracker:*" cache-policy _tracker_caching_policy
fi

_tracker_caching_policy() {
  [[ "$_tracker_frame_file" -nt "$1" ]] && return 0
  return 1
}


# ~~~ COMPLETION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_tracker() {
  typeset -A opt_args
  local context state line curcontext="$curcontext"

  _arguments : \
    '--version[Show the version and exit.]' \
    '--help[Show help and exit.]' \
    '1: :_tracker_cmds' \
    '*::arg:->args' \
  && return 0

  case "$state" in
    (args)
      case $words[1] in
        (cancel|help|projects|restart|status|stop|sync|tags)
          _arguments : '--help'
          ;;
        (start)
          _arguments -A '-*' : \
            ': :_tracker_projects' \
            '*: :_tracker_plus_tags' \
            '--help'
          ;;
        (edit)
          _arguments -A '-*' : \
            ': :_tracker_frames' \
            '--help'
          ;;
        (remove)
          _arguments : \
            '-f[Dont ask for confirmation]' \
            ': :_tracker_frames' \
            '--help'
          ;;
        (stop)
          _arguments : \
            '*'{-m,--message}'Add message' \
            '*'{-n,--no-log}'Dont automatically add a worklog, even if configured otherwise' \
            '--help'
          ;;
        (log|report)
          _arguments : \
            '*'{-p,--project}'[only for the given project]: :_tracker_projects' \
            '*'{-T,--tag}'[only for the given tag]: :_tracker_tags' \
            '(--from -f)'{-f,--from}'[start date]:date (YYYY-MM-DD):' \
            '(--to -t)'{-t,--to}'[end date]:date (YYYY-MM-DD):' \
            '--help'
          ;;
        (merge)
          _arguments : \
            '--help' \
            {-f,--force} \
            ': :_files'
          ;;
      esac
      ;;
  esac;
}


(( $+functions[_tracker_projects] )) ||
_tracker_projects() {
  _tracker_get_projects
  local expl
  _description projects expl 'projects'
  compadd "$expl[@]" -a -- _tracker_project_list
}

(( $+functions[_tracker_frames] )) ||
_tracker_frames() {
  _tracker_get_frames
  local expl i
  for l in $_tracker_frame_list; do
    if [[ "$l" =~ '^[A-Z]' ]];
    then
      i=$(($i+1))
      _description -V frames$i expl "${l%%\(*\)}"
    else
      desc=(${l##[[:space:]]})
      IFS=' ' read -r val _ <<< $desc
      compadd "$expl[@]" -d desc -l - "$val"
    fi
  done;
}

(( $+functions[_tracker_tags] )) ||
_tracker_tags() {
  _tracker_get_tags
  compadd "$@" -a -- _tracker_tag_list
}

(( $+functions[_tracker_plus_tags] )) ||
_tracker_plus_tags() {
  _tracker_get_tags
  local expl
  _description tags expl 'tags'
  compadd "$expl[@]" -a -p '+' -- _tracker_tag_list
}

(( $+functions[_tracker_cmds] )) ||
_tracker_cmds() {
  _describe -t commands 'commands' _tracker_commands "$@"
}

_tracker "$@"
